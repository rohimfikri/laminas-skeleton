<?php
use Zend\Mvc\Application;
use Zend\Debug\Debug;
// Debug::dump($this->identity());die();
$this->headLink()->appendStylesheet('https://fonts.googleapis.com/css?family=Inconsolata');
$this->headStyle()->captureStart();
?>
html {
  min-height: 100%;
}

body {
  box-sizing: border-box;
  height: 100%;
  background-color: #000000;
  background-image: radial-gradient(#11581E, #041607);
  font-family: 'Inconsolata', Helvetica, sans-serif;
  font-size: 1.5rem;
  color: rgba(128, 255, 128, 0.8);
  text-shadow:
      0 0 1ex rgba(51, 255, 51, 1),
      0 0 2px rgba(255, 255, 255, 0.8);
}

.overlay {
  pointer-events: none;
  position: absolute;
  width: 99.5%;
  height: 100%;
  background:
      repeating-linear-gradient(
      180deg,
      rgba(0, 0, 0, 0) 0,
      rgba(0, 0, 0, 0.3) 50%,
      rgba(0, 0, 0, 0) 100%);
  background-size: auto 4px;
  z-index: 99;
}

.overlay::before {
  content: "";
  pointer-events: none;
  position: absolute;
  display: block;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  width: 100%;
  height: 100%;
  background-image: linear-gradient(
      0deg,
      transparent 0%,
      rgba(32, 128, 32, 0.2) 2%,
      rgba(32, 128, 32, 0.8) 3%,
      rgba(32, 128, 32, 0.2) 3%,
      transparent 100%);
  background-repeat: no-repeat;
  animation: scan 7.5s linear 0s infinite;
}

@keyframes scan {
  0%        { background-position: 0 -100vh; }
  35%, 100% { background-position: 0 100vh; }
}

.terminal {
  box-sizing: inherit;
  position: absolute;
  height: 100%;
  width: 1000px;
  max-width: 100%;
  padding: 4rem;
}

.output {
  color: rgba(128, 255, 128, 0.8);
  text-shadow:
      0 0 1px rgba(51, 255, 51, 0.4),
      0 0 2px rgba(255, 255, 255, 0.8);
}

.output.stacktrace{
  font-size: 1rem;
}

.output::before {
  content: "> ";
}

a {
  color: #fff;
  text-decoration: none;
}

a::before {
  content: "[";
}

a::after {
  content: "]";
}

.errorcode {
  color: white;
}
<?php
$this->headStyle()->captureEnd();
$identity = null;
// try{
// $identity = $this->identity();
// }catch(Zend\View\Exception\RuntimeException $e){}
?>

<div class="overlay"></div>
<div class="terminal">
  <h1>Error <span class="errorcode">404</span></h1>
<?php if(_DEBUG_ || ($identity!=null && isset($identity['roles'][1]))) : ?>
  <h2><span class="errorcode"><?= $this->message ?></span></h2>
<?php endif ?>
  <p class="output">The page you are looking for might have been removed, had its name changed or is temporarily unavailable</p>
<?php 
if(_DEBUG_ || ($identity!=null && isset($identity['roles'][1]))){
?>
  <h2><span class="errorcode">REASON.</span></h2>
<?php
    if (! empty($this->reason)){
    switch ($this->reason) {
        case Application::ERROR_CONTROLLER_CANNOT_DISPATCH:
            $reasonMessage = 'The requested controller was unable to dispatch the request.';
            break;
        case Application::ERROR_MIDDLEWARE_CANNOT_DISPATCH:
            $reasonMessage = 'The requested middleware was unable to dispatch the request.';
            break;
        case Application::ERROR_CONTROLLER_NOT_FOUND:
            $reasonMessage = 'The requested controller could not be mapped to an existing controller class.';
            break;
        case Application::ERROR_CONTROLLER_INVALID:
            $reasonMessage = 'The requested controller was not dispatchable.';
            break;
        case Application::ERROR_ROUTER_NO_MATCH:
            $reasonMessage = 'The requested URL could not be matched by routing.';
            break;
        default:
            $reasonMessage = 'We cannot determine at this time why a 404 was generated.';
            break;
    }
?>
  <p class="output"><?= $reasonMessage ?></p>
<?php 
    }
?>

<?php if (! empty($this->controller)) : ?>
  <h2><span class="errorcode">CONTROLLER.</span></h2>
  <p class="output">
    <?= $this->escapeHtml($this->controller) ?>
    <?php
    if (! empty($this->controller_class) && $this->controller_class != $this->controller) {
        printf('(resolves to %s)', $this->escapeHtml($this->controller_class));
    }
    ?>
    </p>
<?php endif ?>

<?php if (! empty($this->display_exceptions)) : ?>
    <?php if (isset($this->exception)
        && ($this->exception instanceof \Exception || $this->exception instanceof \Error)) : ?>
  <h2><span class="errorcode">Additional information : </span><?= get_class($this->exception) ?></h2>
  <p class="output">
    File : <?= $this->exception->getFile() ?>:<?= $this->exception->getLine() ?>
    </p>
  <p class="output">
    Message : <?= $this->escapeHtml($this->exception->getMessage()) ?>
    </p>
  <p class="output stacktrace">
    Stack trace : <?= $this->escapeHtml($this->exception->getTraceAsString()) ?>
    </p>
</dl>

        <?php if ($ex = $this->exception->getPrevious()) : ?>
  <h2><span class="errorcode">Previous exceptions.</span></h2>
            <?php $icount = 0 ?>
            <?php while ($ex) : ?>
  <h2><span class="errorcode"><?= get_class($ex) ?></span></h2>
  <p class="output">
    File : <?= $ex->getFile() ?>:<?= $ex->getLine() ?>
    </p>
  <p class="output">
    Message : <?= $this->escapeHtml($ex->getMessage()) ?>
    </p>
  <p class="output stacktrace">
    Stack trace : <?= $this->escapeHtml($ex->getTraceAsString()) ?>
    </p>
                <?php
                $ex = $ex->getPrevious();
                if (++$icount >= 50) {
                    echo '<h2><span class="errorcode">There may be more exceptions, but we do not have enough memory to process it.</span></h2>';
                    break;
                }
                ?>
            <?php endwhile ?>
</ul>
        <?php endif ?>
    <?php else : ?>
  <h2><span class="errorcode">No Exception available.</span></h2>
    <?php endif ?>
<?php endif ?>
<?php
}

if($identity!=null){
?>
  <p class="output">Back to <a href="<?= $this->identity()['default_redirect'] ?>">Home</a></p>
<?php
}
?>
</div>